/* 
* SSD1306.cpp
*
* Created: 30.05.2018 19:34:55
* Author: dominik hellhake
*/


#include "SSD1306.h"

uint8_t SSD1306::ASCII[320] = {
	0, 0,
	7, 192,
	15, 224,
	31, 240,
	56, 112,
	56, 24,
	76, 8,
	70, 8,
	67, 8,
	65, 136,
	64, 200,
	96, 112,
	48, 112,
	63, 224,
	31, 192,
	15, 128,

	0, 0,
	0, 0,
	0, 8,
	0, 8,
	0, 8,
	0, 8,
	0, 8,
	127, 248,
	127, 248,
	127, 248,
	64, 8,
	32, 8,
	32, 8,
	32, 8,
	16, 8,
	0, 0,

	0, 0,
	0, 0,
	56, 8,
	56, 8,
	124, 8,
	102, 8,
	70, 8,
	67, 8,
	65, 8,
	65, 136,
	64, 200,
	64, 72,
	64, 120,
	96, 56,
	32, 24,
	0, 0,

	0, 0,
	0, 0,
	0, 224,
	25, 240,
	61, 240,
	125, 16,
	103, 24,
	70, 8,
	66, 8,
	66, 8,
	66, 8,
	66, 8,
	66, 8,
	32, 24,
	32, 16,
	0, 0,

	0, 0,
	0, 64,
	0, 64,
	0, 64,
	0, 64,
	127, 248,
	127, 248,
	127, 248,
	120, 64,
	60, 64,
	30, 64,
	14, 64,
	7, 64,
	3, 192,
	1, 192,
	0, 192,

	0, 0,
	0, 0,
	1, 192,
	65, 224,
	67, 240,
	67, 48,
	70, 24,
	70, 8,
	68, 8,
	68, 8,
	68, 8,
	68, 8,
	124, 8,
	124, 8,
	124, 16,
	0, 0,

	0, 0,
	1, 192,
	3, 224,
	67, 240,
	70, 56,
	68, 24,
	68, 8,
	68, 8,
	68, 8,
	98, 8,
	34, 24,
	49, 240,
	63, 240,
	31, 224,
	7, 192,
	0, 0,

	0, 0,
	96, 0,
	112, 0,
	112, 0,
	88, 0,
	76, 0,
	78, 0,
	71, 0,
	67, 0,
	65, 192,
	64, 248,
	64, 120,
	64, 56,
	64, 0,
	64, 0,
	0, 0,

	0, 0,
	0, 0,
	0, 96,
	56, 240,
	61, 240,
	125, 152,
	71, 8,
	66, 8,
	66, 8,
	70, 8,
	71, 8,
	125, 152,
	61, 248,
	24, 240,
	0, 96,
	0, 0,

	0, 0,
	15, 128,
	31, 224,
	63, 224,
	62, 48,
	97, 16,
	65, 24,
	64, 136,
	64, 136,
	64, 136,
	64, 136,
	96, 136,
	49, 136,
	63, 8,
	31, 0,
	14, 0
};


uint8_t SSD1306::FrameBuffer[513] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// default constructor
SSD1306::SSD1306()
{
} //SSD1306

void SSD1306::Init()
{
	uint8_t cmd_buff[2] = {0x00, 0x00};
	
	/* Init I2C peripheral */
	I2C::InitSERCOM();
	
	/* DISPLAYOFF */
	cmd_buff[1] = 0xAE;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* SETDISPLAYCLOCKDIV */
	cmd_buff[1] = 0xD5;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x80;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* SETMULTIPLEX */
	cmd_buff[1] = 0xA8;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 32 - 1;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();

	/* SETDISPLAYOFFSET */
	cmd_buff[1] = 0xD3;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x00;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* SETSTARTLINE */
	cmd_buff[1] = 0x40 | 0x0;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* CHARGEPUMP */
	cmd_buff[1] = 0x8D;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x14;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* MEMORYMODE */
	cmd_buff[1] = 0x20;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x00;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* SEGREMAP */
	cmd_buff[1] = 0xA0 | 0x1;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* COMSCANDEC */
	cmd_buff[1] = 0xC8;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();

	/* SETCOMPINS */
	cmd_buff[1] = 0xDA;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x02;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* SETCONTRAST */
	cmd_buff[1] = 0x81;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x8F;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* SETPRECHARGE */
	cmd_buff[1] = 0xD9;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0xF1;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* SETVCOMDETECT */
	cmd_buff[1] = 0xDB;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x40;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* DISPLAYALLON_RESUME */
	cmd_buff[1] = 0xA4;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* NORMALDISPLAY */
	cmd_buff[1] = 0xA6;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();

	/* DEACTIVATE_SCROLL */
	cmd_buff[1] = 0x2E;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	
	/* DISPLAYON */
	cmd_buff[1] = 0xAF;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
}

void SSD1306::Update()
{
	uint8_t cmd_buff[2] = {0x00, 0x00};
		
	/* COLUMNADDR */
	cmd_buff[1] = 0x21;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x00;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 128-1;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();

	/* PAGEADDR */
	cmd_buff[1] = 0x22;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x00;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
	cmd_buff[1] = 0x03;
	I2C::StartTransmitt(SLAVE_ADDR, cmd_buff, 2);
	I2C::Wait();
		
	SSD1306::FrameBuffer[0] = 0x40;
		
	I2C::StartTransmitt(SLAVE_ADDR, SSD1306::FrameBuffer, 513);
	I2C::Wait();
}

void SSD1306::WriteInt(uint16_t number, uint8_t row)
{
	SSD1306::ClearPage((row * 2) + 0);
	SSD1306::ClearPage((row * 2) + 1);
	
	uint16_t index = row * 256;
	do
	{
		uint8_t digit = number % 10;
		
		SSD1306::WriteChar(SSD1306::ASCII + (32 * digit), index);
		index += 16;
		
		number = (number - digit) / 10;
	} while (number > 0);
}

void SSD1306::ClearPage(uint8_t page)
{
	for (uint16_t x = 0; x < 128; x++)
		SSD1306::FrameBuffer[x + (page * 128)] = 0x00;
}

void SSD1306::WriteChar(uint8_t *chr, uint16_t index)
{
	index += 1; //cmd offset
	
	for (uint8_t x = 1; x < 32; x += 2)
	{
		SSD1306::FrameBuffer[index] = chr[x];
		index++;
	}
	
	index += 128 - 16; //next Page
	
	for (uint8_t x = 0; x < 32; x += 2)
	{
		SSD1306::FrameBuffer[index] = chr[x];
		index++;
	}
}

// default destructor
SSD1306::~SSD1306()
{
} //~SSD1306
